import logging
logging.basicConfig(level=logging.INFO)
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7461387126:AAEoNz6baXkY1_irLtS0R8-4XrxtLKtwzRM'

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Инициализация бота и диспетчера
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Определение состояний
class Form(StatesGroup):
    menu = State()
    confirmation = State()
    found_animal_description = State()
    found_animal_location = State()
    found_animal_type = State()
    found_animal_condition = State()
    found_animal_behavior = State()
    found_animal_reaction = State()
    found_animal_location = State()
    found_animal_type = State()
    found_animal_condition = State()
    found_animal_wild_domestic = State()
    found_animal_photo = State()
    animal_type_selection = State()  
    user_name = State()
    user_phone = State()
    user_city = State()
    volunteer_name = State()
    volunteer_phone = State()
    volunteer_city = State()
    volunteer_experience = State()
    volunteer_help_types = State()
    confirmation = State()
    learn_more = State()
    confirmation = State()
    choose_field = State()
    description = State()
    location = State()
    animal_type = State()
    condition = State()
    behavior = State()
    reaction = State()
    choose_field = State()
    photo = State()
    waiting_for_application = State()
    waiting_for_status_update = State()
    wild_domestic = State()

# Создание клавиатуры для меню "Найти помощь"
def create_main_menu():
    help_button_1 = KeyboardButton("Я нашел(а) животное")
    help_button_2 = KeyboardButton("Я хочу стать волонтером")
    help_button_3 = KeyboardButton("Полезная информация")
    

    main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(help_button_1, help_button_2, help_button_3).add(KeyboardButton("Вернуться в меню"))
    
    return main_menu

# Обработчик для кнопки "Полезная информация"
@dp.message_handler(lambda message: message.text == "Полезная информация")
async def handle_help_button_3(message: types.Message):
    info_message = (
        "Мы рассматриваем возможность сотрудничества с другими некоммерческими организациями, "
        "которые имеют большой опыт в помощи животным. Эти организации смогут консультировать вас "
        "по вопросам передержки и ухода за животными, которых вы решили взять.\n\n"
        "Если вы хотите получить больше информации о том, как заботиться о животных, вы можете "
        "обратиться к нашим партнёрам. Больше информации вы можете найти по следующей ссылке:\n"
        "https://rayfund.ru/about/faq/"
    )
    await message.answer(info_message)  # Отправляем сообщение с информацией

# Обработка нажатия на кнопку "Меню"
@dp.message_handler(lambda message: message.text == "Вернуться в меню")
async def reset_to_start(message: types.Message):
    await message.answer("Вы вернулись в главное меню.", reply_markup=create_main_menu())  # Отправляем основное меню















# Функция для отправки приветственного сообщения
async def send_welcome_message(message: types.Message):
    welcome_text = (
        "Здравствуйте! Я бот помощи для поиска бездомных животных. "
        "Если вы нашли или видели животное без владельца, я помогу вам сообщить об этом."
    )
    await message.answer(welcome_text, reply_markup=create_main_menu())
    logging.info("Отправлено приветственное сообщение")  # Логирование

# Обработчик для команды /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    logging.info("Команда /start получена")  # Логирование
    await state.finish()  # Сброс всех состояний
    logging.info("Состояние сброшено")  # Логирование сброса состояния
    await send_welcome_message(message)

@dp.message_handler(commands=['check_state'])
async def check_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    await message.answer(f"Текущее состояние: {current_state if current_state else 'Нет активного состояния'}")    

# Обработчик для кнопки "Вернуться в меню"
@dp.message_handler(lambda message: message.text == "Вернуться в меню")
async def return_to_menu(message: types.Message, state: FSMContext):
    logging.info("Пользователь вернулся в меню")  # Логирование
    await state.finish()  # Сбрасываем все состояния
    await send_welcome_message(message)  # Отправляем приветственное сообщение с меню
    await message.answer("Выберите, как я могу помочь:", reply_markup=None)
    


# Обработчик для выбора "Я нашел(а) животное"
@dp.message_handler(lambda message: message.text == "Я нашел(а) животное", state='*')
async def found_animal(message: types.Message, state: FSMContext):
    logging.info("Пользователь выбрал 'Я нашел(а) животное'")  # Логирование
    await Form.found_animal_description.set()
    await message.answer(
    """Опишите ситуацию, в которой вы столкнулись с животным.

Укажите физическое состояние найденного животного:

- Есть ли у него видимые травмы (порезы, ссадины) или другие медицинские проблемы (например, кровотечение, хромота, затрудненное дыхание, кашель, истощение)?
  
- Замечаете ли вы какие-либо физические ограничения (например, животное не может ходить или передвигается с трудом)?

Эти детали помогут нам лучше понять ситуацию и организовать необходимую помощь.
""",
    parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove()
    )

# Обработчик для получения описания проблемы
@dp.message_handler(state=Form.found_animal_description)
async def found_animal_description_received(message: types.Message, state: FSMContext):
    logging.info("Получено описание проблемы: %s", message.text)  # Логирование
    await state.update_data(description=message.text)
    await Form.found_animal_location.set()

# Создаем клавиатуру для отправки геолокации
    location_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    location_button = KeyboardButton("Отправить геолокацию", request_location=True)
    location_keyboard.add(location_button)
    location_keyboard.add(KeyboardButton("Вернуться в меню"))  # Добавляем кнопку возврата в меню
    

    await message.answer(
    """Укажите точный адрес, где нашли животное.

Если вы не знаете точного адреса, вы можете отправить свою геолокацию. 
Это поможет нашим волонтерам быстро и точно добраться до места.""",
    reply_markup=location_keyboard
)

@dp.message_handler(lambda message: message.text == "Вернуться в меню", state=Form.found_animal_location)
async def return_to_menu_from_location(message: types.Message, state: FSMContext):
    logging.info("Пользователь вернулся в меню из геолокации")  # Логирование
    await state.finish()  # Сбрасываем все состояния
    await message.answer("Выберите, как я могу помочь:", reply_markup=create_main_menu())  # Отправляем основное меню




@dp.message_handler(state=Form.found_animal_location)
async def found_animal_location_received(message: types.Message, state: FSMContext):
    if message.location:
        await state.update_data(location=f"{message.location.latitude}, {message.location.longitude}")
    else:
        await state.update_data(location=message.text)

    await Form.found_animal_type.set()
    
   # Создаем клавиатуру с предопределенными ответами
    animal_type_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_dog = KeyboardButton("Собака")
    button_cat = KeyboardButton("Кошка")
    button_other = KeyboardButton("Другое")
    animal_type_keyboard.add(button_dog, button_cat, button_other)
    animal_type_keyboard.add(KeyboardButton("Вернуться в меню"))  # Добавляем кнопку возврата в меню

    await message.answer(
    """Спасибо! 

Выберите из приведенного перечня, какое именно животное вы нашли. 

Если животное не указано в списке, нажмите 'Другое' и напишите вид животного. 

Это поможет подготовить соответствующее оборудование и условия для его спасения.
""",
    reply_markup=animal_type_keyboard
)

# Обработчик для кнопки "Вернуться в меню" в состоянии выбора типа животного
@dp.message_handler(lambda message: message.text == "Вернуться в меню", state=Form.found_animal_type)
async def return_to_menu_from_animal_type(message: types.Message, state: FSMContext):
    logging.info("Пользователь вернулся в меню из выбора типа животного")  # Логирование
    await state.finish()  # Сбрасываем все состояния
    await message.answer("Выберите, как я могу помочь:", reply_markup=create_main_menu())  # Отправляем основное меню


@dp.message_handler(state=Form.found_animal_type)
async def found_animal_type_received(message: types.Message, state: FSMContext):
    # Проверяем, что пользователь ввел корректный тип животного
    if message.text in ["Собака", "Кошка"]:
        await state.update_data(animal_type=message.text)
        await Form.found_animal_condition.set()  # Переход к следующему состоянию
        await ask_animal_condition(message.chat.id)  # Запрашиваем состояние животного
    elif message.text == "Другое":
        await message.answer("Пожалуйста, укажите, какое животное:", reply_markup=None)
        return  # Остаемся в том же состоянии для пользовательского ввода
    else:
        # Если пользователь ввел что-то другое, сохраняем это как тип животного
        await state.update_data(animal_type=message.text)
        await Form.found_animal_condition.set()  # Переход к следующему состоянию
        await ask_animal_condition(message.chat.id)  # Запрашиваем состояние животного


async def ask_animal_condition(chat_id):
    condition_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    condition_options = [
        KeyboardButton("Испуганное"),
        KeyboardButton("Агрессивное"),
        KeyboardButton("Спокойное"),
        KeyboardButton("Другое"),
        KeyboardButton("Вернуться в меню")  # Пользователь может ввести свой ответ
    ]
    condition_keyboard.add(*condition_options)

    await bot.send_message(chat_id, "Какое состояние животного?", reply_markup=condition_keyboard)
    await Form.found_animal_condition.set()  # Переход к следующему состоянию

# Обработчик для состояния "Состояние животного"
@dp.message_handler(state=Form.found_animal_condition)
async def found_animal_condition_received(message: types.Message, state: FSMContext):
    if message.text == "Вернуться в меню":
        await message.answer("Вы вернулись в главное меню.", reply_markup=create_main_menu())  # Замените на вашу клавиатуру меню
        await state.finish()  # Завершаем текущее состояние
        return

    await state.update_data(condition=message.text)
    await ask_animal_behavior(message.chat.id)

async def ask_animal_behavior(chat_id):
    behavior_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    behavior_options = [
        KeyboardButton("Прячется"),
        KeyboardButton("Рычит"),
        KeyboardButton("Подходит"),
        KeyboardButton("Убегает"),
        KeyboardButton("Другое"),
        KeyboardButton("Вернуться в меню")  
    ]
    behavior_keyboard.add(*behavior_options)

    await bot.send_message(chat_id, "Какое поведение проявляет животное в вашей присутствии?", reply_markup=behavior_keyboard)
    await Form.found_animal_behavior.set()  # Переход к следующему состоянию

# Обработчик для состояния "Поведение животного"
@dp.message_handler(state=Form.found_animal_behavior)
async def found_animal_behavior_received(message: types.Message, state: FSMContext):
    if message.text == "Вернуться в меню":
        logging.info("Пользователь вернулся в меню из состояния 'Поведение животного'")  # Логирование
        await state.finish()  # Завершаем текущее состояние
        await message.answer("Вы вернулись в главное меню.", reply_markup=create_main_menu())  # Отправляем основное меню
        return

    await state.update_data(behavior=message.text)
    await ask_animal_reaction(message.chat.id)

async def ask_animal_reaction(chat_id):
    reaction_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    reaction_options = [
        KeyboardButton("Да"),
        KeyboardButton("Нет"),
        KeyboardButton("Другое"),
        KeyboardButton("Вернуться в меню")  # Кнопка возврата в меню  
    ]
    reaction_keyboard.add(*reaction_options)

    await bot.send_message(chat_id, "Есть ли у него какие-либо реакции на ваше приближение (например, может ли оно реагировать на ваши команды или движение)?", reply_markup=reaction_keyboard)
    await Form.found_animal_reaction.set()  # Переход к следующему состоянию

# Обработчик для состояния "Реакция животного"
@dp.message_handler(state=Form.found_animal_reaction)
async def found_animal_reaction_received(message: types.Message, state: FSMContext):
    if message.text == "Вернуться в меню":
        logging.info("Пользователь вернулся в меню из состояния 'Реакция животного'")  # Логирование
        await state.finish()  # Завершаем текущее состояние
        await message.answer("Вы вернулись в главное меню.", reply_markup=create_main_menu())  # Отправляем основное меню
        return

    await state.update_data(reaction=message.text)
    await ask_animal_type_selection(message.chat.id)

async def ask_animal_type_selection(chat_id):
    # Создаем клавиатуру для выбора домашнего или дикого животного
    wild_domestic_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_domestic = KeyboardButton("Домашнее")
    button_wild = KeyboardButton("Дикое")
    wild_domestic_keyboard.add(button_domestic, button_wild, KeyboardButton("Вернуться в меню"))  # Кнопка возврата в меню
    
    await bot.send_message(chat_id, "Домашнее или дикое животное?", reply_markup=wild_domestic_keyboard)
    await Form.animal_type_selection.set()  # Переход к следующему состоянию
@dp.message_handler(state=Form.animal_type_selection)
async def found_animal_wild_domestic_received(message: types.Message, state: FSMContext):
    if message.text == "Вернуться в меню":
        logging.info("Пользователь вернулся в меню из состояния 'Выбор типа животного'")  # Логирование
        await state.finish()  # Завершаем текущее состояние
        await message.answer("Вы вернулись в главное меню.", reply_markup=create_main_menu())  # Отправляем основное меню
        return

    logging.info(f"Received wild/domestic type: {message.text}")  # Логируем полученный тип
    await state.update_data(wild_domestic=message.text)
    await Form.found_animal_photo.set()
    await message.answer("Есть ли у вас фото? (Загрузите фото)", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(content_types=['photo'], state=Form.found_animal_photo)
async def found_animal_photo_received(message: types.Message, state: FSMContext):
    # Получаем file_id фото
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo=photo_file_id)  # Сохраняем file_id
    await message.answer("✅ Загружено успешно. Укажите Ваше имя:")
    await Form.user_name.set()

@dp.message_handler(state=Form.user_name)
async def user_name_received(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await Form.user_phone.set()
    await message.answer("Укажите Ваш телефон:")

@dp.message_handler(state=Form.user_phone)
async def user_phone_received(message: types.Message, state: FSMContext):
    await state.update_data(user_phone=message.text)
    
    # Переходим сразу к подтверждению, без ввода города
    await Form.confirmation.set()
    
    user_data = await state.get_data()
    
    # Получаем file_id фото
    photo_file_id = user_data['photo']
    
    # Отправляем фото обратно пользователю
    await message.answer_photo(photo_file_id, caption="Вот ваше загруженное фото:")
    
    confirmation_text = (
        "Вы отправили следующую информацию:\n"
    f"- Описание проблемы: {user_data.get('description', 'Не указано')}\n"
    f"- Место нахождения: {user_data.get('location', 'Не указано')}\n"
    f"- Вид животного: {user_data.get('animal_type', 'Не указано')}\n"
    f"- Состояние животного: {user_data.get('condition', 'Не указано')}\n"
    f"- Поведение животного: {user_data.get('behavior', 'Не указано')}\n"
    f"- Реакция на приближение: {user_data.get('reaction', 'Не указано')}\n"
    f"- Домашнее/дикое: {user_data.get('wild_domestic', 'Не указано')}\n"
    f"- Статус фото: ✅ Фото загружено успешно\n"
    f"- Ваше имя: {user_data.get('user_name', 'Не указано')}\n"
    f"- Ваш телефон: {user_data.get('user_phone', 'Не указано')}\n"
    "Отправить запрос?"
    )

# Создаем inline-клавиатуру с кнопками "Да" и "Нет"
    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("Да", callback_data='confirm_yes'))
    inline_kb.add(InlineKeyboardButton("Нет", callback_data='confirm_no'))
    
    await message.answer(confirmation_text, reply_markup=inline_kb)  # Отправляем текст подтверждения с клавиатурой

@dp.callback_query_handler(lambda c: c.data == 'confirm_yes', state=Form.confirmation)
async def send_info(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # Подтверждаем нажатие кнопки
    user_data = await state.get_data()
    user_name = user_data['user_name']
    
    # Генерируем уникальный ID заявки
    request_id = random.randint(1000, 9999)  # Пример генерации ID, можно использовать более сложные методы

    confirmation_message = (
        f"🎉 Спасибо, {user_name}! Ваша информация отправлена в центр помощи животным.\n"
        f"Ваш ID заявки: **{request_id}**.\n"
        f"Статус вашей заявки: **Успешно зарегистрирована**.\n\n"
        "🔍 Что будет с заявкой дальше:\n"
        "1. Ваша заявка будет проверена нашими специалистами в течение 1 часа.\n"
        "2. Если потребуется дополнительная информация, с вами свяжется наш координатор, который поможет вам на каждом этапе.\n"
        "3. Вы получите уведомление о результате рассмотрения вашей заявки и дальнейших действиях.\n\n"
        "💬 Если у вас возникнут вопросы, не стесняйтесь обращаться к нам в любое время!\n"
        "Спасибо за вашу заботу о животных! 🐾"
    )

    await callback_query.message.answer(confirmation_message, parse_mode='Markdown')
    await asyncio.sleep(5)  # Задержка в 5 секунд, вы можете изменить это значение
     # Определите информацию о животном
    animal_info = {
    'clinic_name': 'Ветклиника "Забота"',
    'clinic_phone': '+7 (123) 456-78-90',
    'health_status': 'Стабильное состояние'
}

    await send_status_updates(callback_query.from_user.id, user_name, request_id, animal_info)
    # Функция для отправки уведомлений об изменении статуса заявки
    await state.finish()

async def send_status_updates(user_id, user_name, request_id, animal_info):
    statuses = [
         f"🎉 Здравствуйте, {user_name}!\n\n"
        f"📄 Ваша заявка на спасение животного с ID {request_id} находится на рассмотрении!\n"
        "🔍 Мы уже начали обрабатывать вашу заявку.",

        f"\n👋 Здравствуйте, {user_name}!\n\n"
        f"📄 Ваша заявка с ID {request_id} принята в работу.\n"
        "🔧 Мы изучили информацию о найденном вами животном и продолжаем работать над вашей заявкой.",

        f"\n🔍 Уважаемый(ая) {user_name},\n\n"
        f"📄 Ваша заявка с ID {request_id} находится на этапе обработки.\n"
        "👩‍⚕️ Мы проверяем все данные и готовим необходимые действия для спасения животного.",

        f"\n🚀 Отличные новости, {user_name}!\n\n"
        f"📄 Мы нашли волонтера, готового помочь со спасением и транспортировкой животного!\n"
        "🤝 Волонтер направляется по указанному адресу для оказания помощи.",

        f"\n🏥 Животное направлено в ветклинику!\n\n"
        f"📄 Мы назначили осмотр в следующей ветклинике: {animal_info['clinic_name']}.\n"
        f"📞 Телефон клиники: {animal_info['clinic_phone']}.",

        f"\n🔔 Обновление статуса:\n\n"
        f"📄 Животное было осмотрено ветеринаром. Состояние: {animal_info['health_status']}.\n"
        "💬 Если у вас есть вопросы, не стесняйтесь обращаться к нам.",

        f"\n🎊 С радостью сообщаем, что процесс спасения животного завершен!\n\n"
        f"📄 Животное готово к передаче и может быть забрано из ветеринарной клиники. Для получения дополнительной информации, пожалуйста, свяжитесь с ветклиникой по телефону: {animal_info['clinic_phone']}.\n"
        "💬 Благодарим Вас за ваше внимание и заботу о животных!",

        f"\n📝 Мы ценим вашу помощь!\n\n"
        "🤔 Пожалуйста, дайте нам знать, как прошел процесс и как мы можем улучшить работу нашего сервиса. Ваше мнение очень важно для нас!"
    ]
    
    for status in statuses:
        await bot.send_message(user_id, status)
        await asyncio.sleep(5)  # Задержка между уведомлениями (например, 2 секунды)


@dp.callback_query_handler(lambda c: c.data == 'confirm_no', state=Form.confirmation)
async def cancel_info(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # Подтверждаем нажатие кнопки
    

    # Спрашиваем пользователя, какую часть информации он хочет изменить
    choice_kb = InlineKeyboardMarkup()
    choice_kb.add(InlineKeyboardButton("Описание проблемы", callback_data='edit_description'))
    choice_kb.add(InlineKeyboardButton("Место нахождения", callback_data='edit_location'))
    choice_kb.add(InlineKeyboardButton("Вид животного", callback_data='edit_animal_type'))
    choice_kb.add(InlineKeyboardButton("Состояние животного", callback_data='edit_condition'))
    choice_kb.add(InlineKeyboardButton("Поведение животного", callback_data='edit_behavior'))
    choice_kb.add(InlineKeyboardButton("Реакция на приближение", callback_data='edit_reaction'))
    choice_kb.add(InlineKeyboardButton("Домашнее/дикое", callback_data='edit_wild_domestic'))
    choice_kb.add(InlineKeyboardButton("Ваше имя", callback_data='edit_user_name'))
    choice_kb.add(InlineKeyboardButton("Ваш телефон", callback_data='edit_user_phone'))
    choice_kb.add(InlineKeyboardButton("Загрузить фото", callback_data='edit_photo'))  # Кнопка для изменения фото
    choice_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done'))
    await bot.send_message(callback_query.from_user.id, "Какую информацию вы хотите изменить?", reply_markup=choice_kb)
    await Form.choose_field.set()  # Устанавливаем состояние для выбора поля

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=Form.choose_field)
async def edit_field(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    print("edit_field: Обработан запрос на редактирование поля.")  # Отладочное сообщение


    field_map = {
        'edit_description': 'Введите новое описание проблемы:',
        'edit_location': 'Введите новое место нахождения:',
        'edit_animal_type': 'Введите новый вид животного:',
        'edit_condition': 'Введите новое состояние животного:',
        'edit_behavior': 'Введите новое поведение животного:',
        'edit_reaction': 'Введите новую реакцию на приближение:',
        'edit_wild_domestic': 'Введите информацию о том, домашнее или дикое животное:',
        'edit_photo': 'Пожалуйста, загрузите фото:',
        'edit_user_name': 'Введите ваше новое имя:',
        'edit_user_phone': 'Введите ваш новый телефон:',
    }
    
    field_to_edit = callback_query.data
    prompt = field_map.get(field_to_edit, "Пожалуйста, введите новую информацию:")
    
    print(f"edit_field: Выбранное поле для редактирования: {field_to_edit}")  # Отладочное сообщение
    await callback_query.message.answer(prompt)
    
    # Устанавливаем состояние для соответствующего поля
    if field_to_edit == 'edit_description':
        await Form.description.set()
    elif field_to_edit == 'edit_location':
        await Form.location.set()
    elif field_to_edit == 'edit_animal_type':
        await Form.animal_type.set()
    elif field_to_edit == 'edit_condition':
        await Form.condition.set()
    elif field_to_edit == 'edit_behavior':
        await Form.behavior.set()
    elif field_to_edit == 'edit_reaction':
        await Form.reaction.set()
    elif field_to_edit == 'edit_wild_domestic':
        await Form.wild_domestic.set()
    elif field_to_edit == 'edit_photo':
        await Form.photo.set()
    # Не устанавливаем состояние для телефона, пока имя не подтверждено
    elif field_to_edit == 'edit_user_name':
        await Form.user_name.set()
        print("edit_field: Установлено состояние для ввода имени.") # Отладочное сообщение
    elif field_to_edit == 'edit_user_phone':
        await Form.user_phone.set()  
        print("edit_field: Установлено состояние для ввода телефона.") # Отладочное сообщение


@dp.message_handler(state=Form.user_name)
async def process_user_name(message: types.Message, state: FSMContext):
    print("process_user_name: Получено новое имя.")  # Отладочное сообщение
    async with state.proxy() as data:
        data['user_name'] = message.text  # Сохраняем новое имя
    await message.reply("Ваше имя успешно обновлено. Нажмите 'Готово' для подтверждения или 'Нет' для изменения.")
    
    # Предлагаем кнопки для подтверждения
    confirmation_kb = InlineKeyboardMarkup()
    confirmation_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done_name'))
    confirmation_kb.add(InlineKeyboardButton("Нет", callback_data='confirm_no_name'))  # Кнопка для изменения имени

    await message.answer("Подтвердите, пожалуйста, ваше имя:", reply_markup=confirmation_kb)

@dp.callback_query_handler(lambda c: c.data == 'confirm_done_name', state=Form.user_name)
async def confirm_user_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    print("confirm_user_name: Имя подтверждено.")  # Отладочное сообщение
    await callback_query.message.answer("Имя подтверждено.")
    
    await Form.user_phone.set()
    await callback_query.message.answer("Введите ваш новый телефон:")  # Запрашиваем ввод телефона


@dp.callback_query_handler(lambda c: c.data == 'confirm_no_name', state=Form.user_name)
async def change_user_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    print("change_user_name: Пользователь хочет изменить имя.")  # Отладочное сообщение
    await callback_query.message.answer("Введите ваше новое имя:")
    # Оставляем состояние Form.user_name активным для ожидания нового имени


@dp.message_handler(state=Form.user_phone)
async def process_user_phone(message: types.Message, state: FSMContext):
    print("process_user_phone: Получен номер телефона.")  # Отладочное сообщение
    async with state.proxy() as data:
        data['user_phone'] = message.text  # Сохраняем новый телефон
    await message.reply("Ваш телефон успешно обновлен. Нажмите 'Готово' для подтверждения или 'Нет' для изменения.")
    
    # Предлагаем кнопки для подтверждения
    confirmation_kb = InlineKeyboardMarkup()
    confirmation_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done_phone'))
    confirmation_kb.add(InlineKeyboardButton("Нет", callback_data='confirm_no_phone'))  # Кнопка для изменения телефона
    
    await message.answer("Подтвердите, пожалуйста, ваш телефон:", reply_markup=confirmation_kb)

@dp.callback_query_handler(lambda c: c.data == 'confirm_done_phone', state=Form.user_phone)
async def confirm_user_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("Телефон подтвержден.")
    await offer_update_options(callback_query.from_user.id, state)  # Возвращаем к выбору полей

@dp.callback_query_handler(lambda c: c.data == 'confirm_no_phone', state=Form.user_phone)
async def change_user_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("Введите ваш новый телефон:")
    # Оставляем состояние Form.user_phone активным для ожидания нового телефона


# Обработчики для ввода новых данных
@dp.message_handler(state=Form.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await message.reply("Описание проблемы обновлено.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.location)
async def process_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['location'] = message.text
    await message.reply("Место нахождения обновлено.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.animal_type)
async def process_animal_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['animal_type'] = message.text
    await message.reply("Вид животного обновлен.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.condition)
async def process_condition(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['condition'] = message.text
    await message.reply("Состояние животного обновлено.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.behavior)
async def process_behavior(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['behavior'] = message.text
    await message.reply("Поведение животного обновлено.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.reaction)
async def process_reaction(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['reaction'] = message.text
    await message.reply("Реакция на приближение обновлена.")
    await offer_update_options(message.chat.id, state)

@dp.message_handler(state=Form.wild_domestic)
async def process_wild_domestic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['wild_domestic'] = message.text
    await message.reply("Информация о том, домашнее или дикое животное, обновлена.")
    await offer_update_options(message.chat.id, state)
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def process_photo(message: types.Message, state: FSMContext):
    # Сохраняем фото в состоянии
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id  # Сохраняем ID самого высокого качества фото
    await message.reply("Новое фото успешно загружено. Нажмите 'Готово' для подтверждения или 'Нет' для изменения.")
    
    # Предлагаем кнопки для подтверждения
    confirmation_kb = InlineKeyboardMarkup()
    confirmation_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done'))
    confirmation_kb.add(InlineKeyboardButton("Нет", callback_data='confirm_no'))
    
    await message.answer("Подтвердите, пожалуйста, ваше фото:", reply_markup=confirmation_kb)

@dp.callback_query_handler(lambda c: c.data == 'confirm_done', state=Form.photo)
async def confirm_photo(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    async with state.proxy() as data:
        photo_id = data.get('photo')
        await bot.send_photo(callback_query.from_user.id, photo_id, caption="Спасибо, Ваше фото подтверждено.")

    await offer_update_options(callback_query.from_user.id, state)  # Предлагаем выбрать информацию для изменения

@dp.callback_query_handler(lambda c: c.data == 'confirm_no', state=Form.photo)
async def change_photo(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("Пожалуйста, загрузите новое фото:")
    # Оставляем состояние Form.photo активным для ожидания нового фото

async def offer_update_options(chat_id: int, state: FSMContext):
    choice_kb = InlineKeyboardMarkup()
    choice_kb.add(InlineKeyboardButton("Описание проблемы", callback_data='edit_description'))
    choice_kb.add(InlineKeyboardButton("Место нахождения", callback_data='edit_location'))
    choice_kb.add(InlineKeyboardButton("Вид животного", callback_data='edit_animal_type'))
    choice_kb.add(InlineKeyboardButton("Состояние животного", callback_data='edit_condition'))
    choice_kb.add(InlineKeyboardButton("Поведение животного", callback_data='edit_behavior'))
    choice_kb.add(InlineKeyboardButton("Реакция на приближение", callback_data='edit_reaction'))
    choice_kb.add(InlineKeyboardButton("Домашнее/дикое", callback_data='edit_wild_domestic'))
    choice_kb.add(InlineKeyboardButton("Загрузить фото", callback_data='edit_photo'))  # Кнопка для загрузки фото
    choice_kb.add(InlineKeyboardButton("Ваше имя", callback_data='edit_user_name'))  # Кнопка для изменения имени
    choice_kb.add(InlineKeyboardButton("Ваш телефон", callback_data='edit_user_phone'))  # Кнопка для изменения телефона
    choice_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done'))

    await bot.send_message(chat_id, "Какую информацию вы хотите изменить?", reply_markup=choice_kb)
    await Form.choose_field.set()  # Устанавливаем состояние для выбора поля

@dp.callback_query_handler(lambda c: c.data == 'confirm_done', state=Form.choose_field)
async def confirm_done(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        confirmation_text = (
            "Вы отправили следующую информацию:\n"
            f"- Описание проблемы: {data.get('description', 'Не указано')}\n"
            f"- Место нахождения: {data.get('location', 'Не указано')}\n"
            f"- Вид животного: {data.get('animal_type', 'Не указано')}\n"
            f"- Состояние животного: {data.get('condition', 'Не указано')}\n"
            f"- Поведение животного: {data.get('behavior', 'Не указано')}\n"
            f"- Реакция на приближение: {data.get('reaction', 'Не указано')}\n"
            f"- Домашнее/дикое: {data.get('wild_domestic', 'Не указано')}\n"
            f"- Ваше имя: {data.get('user_name', 'Не указано')}\n"
            f"- Ваш телефон: {data.get('user_phone', 'Не указано')}\n"
            "Подтвердите отправку запроса?"
        )

    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("Да", callback_data='confirm_yes'))
    inline_kb.add(InlineKeyboardButton("Нет", callback_data='confirm_no'))

    await callback_query.message.answer(confirmation_text, reply_markup=inline_kb)

@dp.callback_query_handler(lambda c: c.data == 'confirm_yes', state=Form.choose_field)
async def confirm_submission(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        user_name = data.get('user_name', 'Пользователь')  # Получаем имя пользователя
        # Генерируем уникальный ID заявки
        request_id = random.randint(1000, 9999)  # Пример генерации ID, можно использовать более сложные методы

        confirmation_message = (
            f"🎉 Спасибо, {user_name}! Ваша информация успешно отправлена в центр помощи животным.\n"
            f"Ваш ID заявки: **{request_id}**.\n"
            f"Статус вашей заявки: **Успешно зарегистрирована**.\n\n"
            "🔍 Что будет с заявкой дальше:\n"
            "1. Ваша заявка будет проверена нашими специалистами в течение 1 часа.\n"
            "2. Если потребуется дополнительная информация, с вами свяжется наш координатор, который поможет вам на каждом этапе.\n"
            "3. Вы получите уведомление о результате рассмотрения вашей заявки и дальнейших действиях.\n\n"
            "💬 Если у вас возникнут вопросы, не стесняйтесь обращаться к нам в любое время!\n"
            "Спасибо за вашу заботу о животных! 🐾"
        )

    await callback_query.message.answer(confirmation_message, parse_mode='Markdown')
    await asyncio.sleep(5)  # Задержка в 5 секунд, вы можете изменить это значение
     # Определите информацию о животном
    animal_info = {
    'clinic_name': 'Ветклиника "Забота"',
    'clinic_phone': '+7 (123) 456-78-90',
    'health_status': 'Стабильное состояние'
}

    await send_status_updates(callback_query.from_user.id, user_name, request_id, animal_info)
    # Функция для отправки уведомлений об изменении статуса заявки
    await state.finish()

async def send_status_updates(user_id, user_name, request_id, animal_info):
    statuses = [
         f"🎉 Здравствуйте, {user_name}!\n\n"
        f"📄 Ваша заявка на спасение животного с ID {request_id} находится на рассмотрении!\n"
        "🔍 Мы уже начали обрабатывать вашу заявку.",

        f"\n👋 Здравствуйте, {user_name}!\n\n"
        f"📄 Ваша заявка с ID {request_id} принята в работу.\n"
        "🔧 Мы изучили информацию о найденном вами животном и продолжаем работать над вашей заявкой.",

        f"\n🔍 Уважаемый(ая) {user_name},\n\n"
        f"📄 Ваша заявка с ID {request_id} находится на этапе обработки.\n"
        "👩‍⚕️ Мы проверяем все данные и готовим необходимые действия для спасения животного.",

        f"\n🚀 Отличные новости, {user_name}!\n\n"
        f"📄 Мы нашли волонтера, готового помочь со спасением и транспортировкой животного!\n"
        "🤝 Волонтер направляется по указанному адресу для оказания помощи.",

        f"\n🏥 Животное направлено в ветклинику!\n\n"
        f"📄 Мы назначили осмотр в следующей ветклинике: {animal_info['clinic_name']}.\n"
        f"📞 Телефон клиники: {animal_info['clinic_phone']}.",

        f"\n🔔 Обновление статуса:\n\n"
        f"📄 Животное было осмотрено ветеринаром. Состояние: {animal_info['health_status']}.\n"
        "💬 Если у вас есть вопросы, не стесняйтесь обращаться к нам.",

        f"\n🎊 С радостью сообщаем, что процесс спасения животного завершен!\n\n"
        f"📄 Животное готово к передаче и может быть забрано из ветеринарной клиники. Для получения дополнительной информации, пожалуйста, свяжитесь с ветклиникой по телефону: {animal_info['clinic_phone']}.\n"
        "💬 Благодарим Вас за ваше внимание и заботу о животных!",

        f"\n📝 Мы ценим вашу помощь!\n\n"
        "🤔 Пожалуйста, дайте нам знать, как прошел процесс и как мы можем улучшить работу нашего сервиса. Ваше мнение очень важно для нас!"
    ]
    
    for status in statuses:
        await bot.send_message(user_id, status)
        await asyncio.sleep(5)  # Задержка между уведомлениями (например, 2 секунды)

@dp.callback_query_handler(lambda c: c.data == 'confirm_no', state=Form.choose_field)
async def cancel_info(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # Подтверждаем нажатие кнопки
    await offer_update_options(callback_query.from_user.id, state)  # Предлагаем выбрать информацию для изменения

async def offer_update_options(chat_id: int, state: FSMContext):
    choice_kb = InlineKeyboardMarkup()
    choice_kb.add(InlineKeyboardButton("Описание проблемы", callback_data='edit_description'))
    choice_kb.add(InlineKeyboardButton("Место нахождения", callback_data='edit_location'))
    choice_kb.add(InlineKeyboardButton("Вид животного", callback_data='edit_animal_type'))
    choice_kb.add(InlineKeyboardButton("Состояние животного", callback_data='edit_condition'))
    choice_kb.add(InlineKeyboardButton("Поведение животного", callback_data='edit_behavior'))
    choice_kb.add(InlineKeyboardButton("Реакция на приближение", callback_data='edit_reaction'))
    choice_kb.add(InlineKeyboardButton("Домашнее/дикое", callback_data='edit_wild_domestic'))
    choice_kb.add(InlineKeyboardButton("Загрузить фото", callback_data='edit_photo'))
    choice_kb.add(InlineKeyboardButton("Ваше имя", callback_data='edit_user_name'))  # Кнопка для изменения имени
    choice_kb.add(InlineKeyboardButton("Ваш телефон", callback_data='edit_user_phone'))  # Кнопка для изменения телефона  # Кнопка для загрузки фото
    choice_kb.add(InlineKeyboardButton("Готово", callback_data='confirm_done'))

    await bot.send_message(chat_id, "Какую информацию вы хотите изменить?", reply_markup=choice_kb)
    await Form.choose_field.set()  # Устанавливаем состояние для выбора поля


    
    
















@dp.message_handler(lambda message: message.text == "Я хочу стать волонтером")
async def volunteer_menu(message: types.Message):
    await Form.volunteer_name.set()
    await message.answer("Для того, чтобы мы рассмотрели вашу заявку, необходимо заполнить следующую информацию:\nУкажите Ваше имя:")

@dp.message_handler(state=Form.volunteer_name)
async def volunteer_name_received(message: types.Message, state: FSMContext):
    # Обновляем состояние с именем волонтера
    await state.update_data(volunteer_name=message.text)
    
    # Уведомляем пользователя о необходимости ввести номер телефона
    await message.answer("Спасибо! Теперь, пожалуйста, укажите ваш номер телефона в текстовом формате.")

    # Переходим к следующему состоянию для ввода номера телефона
    await Form.volunteer_phone.set()

@dp.message_handler(state=Form.volunteer_phone)
async def volunteer_phone_received(message: types.Message, state: FSMContext):
    # Получаем номер телефона из сообщения
    phone_number = message.text
    
    # Сохраняем номер телефона в состоянии
    await state.update_data(volunteer_phone=phone_number)
    
    # Уведомляем пользователя о следующем шаге
    await message.answer("Спасибо! Ваш номер телефона сохранен.")

    # Переходим к следующему состоянию для ввода города
    await Form.volunteer_city.set()
    await message.answer("Укажите Ваш город:")

@dp.message_handler(state=Form.volunteer_city)
async def volunteer_city_received(message: types.Message, state: FSMContext):
    await state.update_data(volunteer_city=message.text)
    await Form.volunteer_experience.set()
    await message.answer("Опыт работы с животными:")

@dp.message_handler(state=Form.volunteer_experience)
async def volunteer_experience_received(message: types.Message, state: FSMContext):
    await state.update_data(volunteer_experience=message.text)
    await Form.volunteer_help_types.set()
    await message.answer("Какие виды помощи вы можете оказывать? (например, перевозка с места на место, передержка, выгул, помощь с лечением, поиск дома и т.д.)")

@dp.message_handler(state=Form.volunteer_help_types)
async def volunteer_help_types_received(message: types.Message, state: FSMContext):
    await state.update_data(volunteer_help_types=message.text)
    
    # Подтверждение информации
    user_data = await state.get_data()
    confirmation_text = (
        "Вы отправили следующую информацию:\n"
        f"- Ваше имя: {user_data['volunteer_name']}\n"
        f"- Ваш телефон: {user_data['volunteer_phone']}\n"
        f"- Ваш город: {user_data['volunteer_city']}\n"
        f"- Опыт работы с животными: {user_data['volunteer_experience']}\n"
        f"- Виды помощи: {user_data['volunteer_help_types']}\n"
        "Отправить запрос? Да/Нет"
    )
    
    await message.answer(confirmation_text)
    await Form.confirmation.set()

@dp.message_handler(lambda message: message.text.lower() == 'да', state=Form.confirmation)
async def send_info(message: types.Message, state: FSMContext):
    await message.answer("Спасибо! Ваша информация успешно отправлена. Мы свяжемся с вами!")
    await state.finish()

@dp.message_handler(lambda message: message.text.lower() == 'нет', state=Form.confirmation)
async def change_info(message: types.Message, state: FSMContext):
    await message.answer("Пожалуйста, введите новую информацию.")
    await Form.volunteer_name.set()

# Новый функционал для информации о боте
@dp.message_handler(lambda message: message.text == "Я хочу узнать больше о боте")
async def info_menu(message: types.Message):
    await Form.info_menu.set()
    info_text = (
        "О проекте:\nЭтот бот создан для помощи животным и волонтерам.\n\n"
        "Как пользоваться ботом:\nВыберите нужный вам пункт меню и следуйте инструкциям.\n\n"
        "Часто задаваемые вопросы:\n1. Как стать волонтером?\n2. Как помочь финансово?\n\n"
        "Контакты:\nВы можете связаться с нами через соцсети или по электронной почте."
    )
    await message.answer(info_text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
